
(define (distinc? items)
    (cond   ((null? items) #t)
            ((null? (cdr items)) #t)
            ((member (car items) (cdr items)) #f)
            (else (distinc? (cdr items)))))

(define (member object items)
   (cond    ((null? items) #f)
            ((equal? object (car items)) #t)
            (else (member object (cdr items)))))

(define (solutions? b c f m s)
    (cond   ((or (= b 0) (= c 0) (= f 0) (= m 0) (= s 0)) #f)
            ((= b 5) #f)
            ((= c 1) #f)
            ((= f 5) #f)
            ((= f 1) #f)
            ((<= m c) #f)
            ((= (abs (- s f)) 1) #f)
            ((= (abs (- f c)) 1) #f)
            ((not (distinc? (list b c f m s))) #f)
            (else #t)))

(define (show-solutions b c f m s)
    (display " - - SOLUTIONS - - ")
    (display "BAKER :")
    (display b)
    (display " - ")
    (display "COOPER :")
    (display c)
    (display " - ")
    (display "FLETCHER :")
    (display f)
    (display " - ")
    (display "MILLER :")
    (display m)
    (display " - ")
    (display "SMITH :")
    (display s)
    (display " "))
    
(define (show-steps b c f m s)
    (display b)
    (display  " ")
    (display c)
    (display  " ")
    (display f)
    (display  " ")
    (display m)
    (display  " ")
    (display s)
    (newline))


(define (multiple-dwelling)
    (let ((b 1) (c 1) (f 1) (m 1) (s 1))
        (define (increase)
            (begin
            (set! s (remainder (+ s 1) 6))
            (if (= s 0) (set! m (remainder (+ m 1) 6)))
            (if (and (= m 0) (= s 0)) (set! f (remainder (+ f 1) 6)))
            (if (and (= f 0) (=  m 0) (= s 0)) (set! c (remainder (+ c 1) 6)))
            (if (and (= c 0) (= f 0) (= m 0) (= s 0)) (set! b (remainder (+ b 1) 6)))))

        (define (iter)
            (if (solutions? b c f m s) 
                (show-solutions b c f m s) 
                (  (show-steps b c f m s)
                        (increase) 
                        (iter))))
    (iter)))

;(multiple-dwelling)
