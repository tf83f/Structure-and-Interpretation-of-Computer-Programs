(define (make-serializer)
    (let ((mutex (make-mutex)))
        (lambda (p)
            (define (serialized-p . args)
                (mutex 'acquire)
                (let ((val (apply p args)))
                    (mutex 'release)
                    val))
                serialized-p)))

(define (make-mutex)
    (let ((cell (list false)))
        (define (the-mutex m) 
            (cond ((eq? m 'acquire)
                (if (test-and-set! cell) 
                    (the-mutex 'acquire))) ; retry
                ((eq? m 'release) (clear! cell))))
        the-mutex))

(define (clear! cell) (set-car! cell false))

(define (test-and-set! cell)
    (if (car cell) true (begin (set-car! cell true) false)))

 (define (make-semaphore n) 
   (let ((total 0) 
         (serializer (make-serializer))) 
     (define (acquire) 
       (if (< total n) 
         (set! total (+ total 1)) 
         (acquire))) 
     (define (release) 
       (set! total (- total 1))) 
     (define (the-semaphore m) 
       (cond ((eq? m 'acquire) (serializer acquire)) ; retry 
             ((eq? m 'release) (serializer release))))
    the-semaphore)) 